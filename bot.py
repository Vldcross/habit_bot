
import json
import logging
import os
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler

API_TOKEN = "8015596815:AAEiisUZoMvVLoQ9r6ciC3KSwWwgrbv1EJE"
DATA_FILE = "data.json"
DAILY_HOUR = 21  # 21:00 –ø–æ –ú–°–ö

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")


def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


def save_data(data):
    temp_file = DATA_FILE + ".tmp"
    with open(temp_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)
    os.replace(temp_file, DATA_FILE)


data = load_data()

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ],
    resize_keyboard=True
)


async def send_cat_meme(chat_id):
    cat_memes = [
        "https://i.imgur.com/WxJ7d8C.jpeg",
        "https://i.imgur.com/9a5m3wP.jpeg",
        "https://i.imgur.com/J5jzF7H.jpeg"
    ]
    meme_url = random.choice(cat_memes)
    await bot.send_photo(chat_id, meme_url, caption="–ú–æ–ª–æ–¥–µ—Ü! –í–æ—Ç –∫–æ—Ç–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è üê±")


def format_progress(goal):
    return (
        "–¶–µ–ª—å: {0}\n–°—É–º–º–∞ –∑–∞ –¥–µ–Ω—å: {1} —Ä—É–±.\n–î–Ω–µ–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ: {2}/{3}\n–ù–∞–∫–æ–ø–ª–µ–Ω–æ: {4} —Ä—É–±."
        .format(
            goal.get('name', '-'),
            goal.get('amount', 0),
            goal.get('days_done', 0),
            goal.get('total_days', 0),
            goal.get('saved', 0)
        )
    )


@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in data:
        data[user_id] = {
            "name": "–í—Ä–µ–¥–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞",
            "amount": 100,
            "days_done": 0,
            "total_days": 30,
            "saved": 0
        }
        save_data(data)

    intro_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–±–µ–∂–¥–∞—Ç—å –≤—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å–≤–æ–∏ –º–µ—á—Ç—ã.\n\n"
        "–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:\n"
        "1. –¢—ã –∑–∞–¥–∞—ë—à—å –ø—Ä–∏–≤—ã—á–∫—É.\n"
        "2. –£–∫–∞–∑—ã–≤–∞–µ—à—å —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—à—å –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ–±–µ–¥—ã.\n"
        "3. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è —Å–ø—Ä–æ—à—É: '–¢—ã –ø–æ–±–µ–¥–∏–ª –ø—Ä–∏–≤—ã—á–∫—É —Å–µ–≥–æ–¥–Ω—è?'\n"
        "4. –ï—Å–ª–∏ '–î–∞', —è –¥–æ–±–∞–≤–ª—é —Å—É–º–º—É –≤ –∫–æ–ø–∏–ª–∫—É –∏ –ø—Ä–∏—à–ª—é –∫–æ—Ç–∏–∫–∞ üê±.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.\n"
        "/settings ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n"
        "/reset_all ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ."
    )

    await message.answer(intro_text, reply_markup=main_keyboard)


@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n"
        "/settings ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å, —Å—É–º–º—É, –¥–Ω–∏.\n"
        "/reset_all ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.\n"
        "–ö–Ω–æ–ø–∫–∏ '–î–∞' –∏ '–ù–µ—Ç' –ø–æ–º–æ–≥–∞—é—Ç –æ—Ç–º–µ—á–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å."
    )
    await message.answer(help_text)


@dp.message(Command("reset_all"))
async def reset_all(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in data:
        del data[user_id]
        save_data(data)
        await message.answer("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã! –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    else:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π.")


@dp.message()
async def handle_message(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in data:
        await message.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Ü–µ–ª—å.")
        return

    goal = data[user_id]
    if message.text == "–î–∞":
        goal["days_done"] += 1
        goal["saved"] += goal["amount"]
        save_data(data)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")
        await send_cat_meme(user_id)
    elif message.text == "–ù–µ—Ç":
        await message.answer("–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –Ω–æ–≤—ã–π —à–∞–Ω—Å.")
    elif message.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await message.answer(format_progress(goal))
    else:
        await message.answer("–Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /help.")


async def send_daily_reminder():
    for user_id in data:
        try:
            await bot.send_message(user_id, "–¢—ã –ø–æ–±–µ–¥–∏–ª –ø—Ä–∏–≤—ã—á–∫—É —Å–µ–≥–æ–¥–Ω—è?", reply_markup=main_keyboard)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user_id}: {e}")


def schedule_jobs():
    scheduler.add_job(send_daily_reminder, "cron", hour=DAILY_HOUR)
    scheduler.start()


async def main():
    schedule_jobs()
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
