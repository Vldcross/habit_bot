import json
import logging
import os
import random
import aiohttp
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler

API_TOKEN = "8015596815:AAEiisUZoMvVLoQ9r6ciC3KSwWwgrbv1EJE"
DATA_FILE = "data.json"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    return {}

def save_data():
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(users_data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

users_data = load_data()
user_steps = {}
settings_steps = {}

yes_no_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
    resize_keyboard=True
)

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="‚ùå –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë")]
    ],
    resize_keyboard=True
)

settings_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")],
        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É")],
        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π")],
        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—É–¥—É—â–µ–≥–æ")],
        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")],
        [KeyboardButton(text="‚Ü©Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å")]
    ],
    resize_keyboard=True
)

async def get_random_cat():
    url = "https://api.thecatapi.com/v1/images/search"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                data = await response.json()
                return data[0]["url"] if data else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ç–∏–∫–∞: {e}")
        return None

def get_user(user_id):
    user_id = str(user_id)
    if user_id not in users_data:
        users_data[user_id] = {
            "goal": None,
            "reminder_hour": 21
        }
        save_data()
    return users_data[user_id]

def format_progress(goal):
    return (
        f"–¶–µ–ª—å: {goal.get('name', '-')}
"
        f"–ü—Ä–∏–≤—ã—á–∫–∞: {goal.get('habit', '-')}
"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {goal.get('progress', 0)}/{goal.get('days', 0)} –¥–Ω–µ–π
"
        f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ: {goal.get('saved', 0)}‚ÇΩ"
    )

def check_achievements(goal):
    if goal["progress"] == 7:
        return "üéâ –ö—Ä—É—Ç–æ! –¢—ã —É–∂–µ 7 –¥–Ω–µ–π –¥–µ—Ä–∂–∏—à—å—Å—è! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
    elif goal["progress"] == 30:
        return "üëë –í–∞—É! 30 –¥–Ω–µ–π ‚Äî —Ç—ã –º–∞—Å—Ç–µ—Ä —Å–≤–æ–µ–π –ø—Ä–∏–≤—ã—á–∫–∏!"
    return None

@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = str(message.from_user.id)
    users_data[user_id] = {"goal": None, "reminder_hour": 21}
    save_data()
    intro_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–±–µ–∂–¥–∞—Ç—å –≤—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å–≤–æ–∏ –º–µ—á—Ç—ã.

"
        "–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:
"
        "1. –¢—ã –∑–∞–¥–∞—ë—à—å –ø—Ä–∏–≤—ã—á–∫—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –∏–∑–±–∞–≤–∏—Ç—å—Å—è.
"
        "2. –£–∫–∞–∑—ã–≤–∞–µ—à—å —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—à—å –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ–±–µ–¥—ã.
"
        "3. –Ø —Å–ø—Ä–æ—à—É, –¥–æ—Å—Ç–∏–≥ –ª–∏ —Ç—ã —É—Å–ø–µ—Ö–∞ —Å–µ–≥–æ–¥–Ω—è, –∏ –µ—Å–ª–∏ '–î–∞' ‚Äî —è –¥–æ–±–∞–≤–ª—é —Å—É–º–º—É –≤ —Ç–≤–æ—é –∫–æ–ø–∏–ª–∫—É –∏ –ø—Ä–∏—à–ª—é –∫–æ—Ç–∏–∫–∞ üê±.
"
        "4. –ú—ã –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏.

"
        "–ö–æ–º–∞–Ω–¥—ã:
"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–µ–ª—å.
"
        "/settings ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.
"
        "/reset_all ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.
"
    )
    await message.answer(intro_text)
    await message.answer("–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º! –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É.", reply_markup=types.ReplyKeyboardRemove())
    user_steps[user_id] = {"step": "habit", "goal": {}}

@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = (
        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:
"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å.
"
        "/settings ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
"
        "/reset_all ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.
"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É.
"
        "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å."
    )
    await message.answer(help_text)

@dp.message(Command("reset_all"))
async def reset_all_command(message: types.Message):
    user_id = str(message.from_user.id)
    users_data[user_id] = {"goal": None, "reminder_hour": 21}
    save_data()
    await message.answer("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å —á–µ—Ä–µ–∑ /start.")

@dp.message(Command("settings"))
async def settings_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=settings_keyboard)

@dp.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    user = get_user(str(message.from_user.id))
    goal = user.get("goal")
    if goal:
        await message.answer(format_progress(goal))
    else:
        await message.answer("–¶–µ–ª—å –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start.")

@dp.message(F.text == "‚Ü©Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å")
async def no_changes(message: types.Message):
    await message.answer("–û–∫, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º.", reply_markup=main_keyboard)

@dp.message(F.text)
async def onboarding_handler(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in user_steps:
        step_data = user_steps[user_id]
        step = step_data["step"]

        if step == "habit":
            step_data["goal"]["habit"] = message.text
            step_data["step"] = "amount"
            await message.answer("–°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π —Ç—ã –≥–æ—Ç–æ–≤ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å?")
        elif step == "amount":
            try:
                amount = int(message.text)
                step_data["goal"]["amount"] = amount
                step_data["step"] = "goal_name"
                await message.answer(f"–¢—ã –≥–æ—Ç–æ–≤ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å {amount}‚ÇΩ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π —Ü–µ–ª–∏.")
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")
        elif step == "goal_name":
            step_data["goal"]["name"] = message.text
            step_data["step"] = "days"
            await message.answer("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ç—ã —Ö–æ—á–µ—à—å –¥–µ—Ä–∂–∞—Ç—å—Å—è?")
        elif step == "days":
            try:
                days = int(message.text)
                step_data["goal"]["days"] = days
                step_data["step"] = "future_message"
                await message.answer("–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ –¥–ª—è –±—É–¥—É—â–µ–≥–æ (–∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—à—å —Ü–µ–ª–∏).")
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–∏—Å–ª–æ–º.")
        elif step == "future_message":
            step_data["goal"]["future_message"] = message.text
            users_data[user_id]["goal"] = {
                **step_data["goal"],
                "progress": 0,
                "saved": 0
            }
            save_data()
            await message.answer(
                f"–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Ç–≤–æ—è —Ü–µ–ª—å:
{format_progress(users_data[user_id]['goal'])}
–ú—ã –Ω–∞—á–Ω—ë–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è!",
                reply_markup=main_keyboard
            )
            user_steps.pop(user_id)

@dp.message(F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def daily_check(message: types.Message):
    user_id = str(message.from_user.id)
    user = get_user(user_id)
    goal = user.get("goal")
    if not goal or not isinstance(goal, dict) or not all(k in goal for k in ['progress', 'saved', 'amount']):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Ü–µ–ª—å —á–µ—Ä–µ–∑ /start.")
        return

    if message.text == "–î–∞":
        goal["progress"] += 1
        goal["saved"] += goal["amount"]
        save_data()

        response = f"–û—Ç–ª–∏—á–Ω–æ! {format_progress(goal)}"

        achievement = check_achievements(goal)
        if achievement:
            response += f"\n\n{achievement}"

        await message.answer(response)
        cat_url = await get_random_cat()
        if cat_url:
            await message.answer_photo(cat_url, caption="–¢–≤–æ–π –∫–æ—Ç–∏–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —É—Å–ø–µ—Ö üê±")

        if goal["progress"] >= goal["days"]:
            await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏: {goal['name']}!\n{goal['future_message']}")
    else:
        support_phrases = [
            "–°–µ–≥–æ–¥–Ω—è –Ω–µ –≤—ã—à–ª–æ, –Ω–æ –∑–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å. –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!",
            "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≥–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è.",
            "–ù–∏—á–µ–≥–æ, –∑–∞–≤—Ç—Ä–∞ –ø–æ–ª—É—á–∏—Ç—Å—è –ª—É—á—à–µ!"
        ]
        await message.answer(random.choice(support_phrases))

async def send_reminders():
    now_hour = datetime.now().hour
    for user_id, user_data in users_data.items():
        try:
            if user_data.get("reminder_hour", 21) == now_hour:
                await bot.send_message(user_id, "–°–µ–≥–æ–¥–Ω—è —Ç—ã –ø–æ–±–µ–¥–∏–ª –ø—Ä–∏–≤—ã—á–∫—É?", reply_markup=yes_no_keyboard)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")

async def main():
    scheduler.add_job(send_reminders, "cron", hour=21, minute=0)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
