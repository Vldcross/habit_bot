import json
import logging
import os
import random
import aiohttp
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# --- –í—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ ---
API_TOKEN = "8015596815:AAEiisUZoMvVLoQ9r6ciC3KSwWwgrbv1EJE"
DATA_FILE = "data.json"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

# ---------------------- –î–ê–ù–ù–´–ï ----------------------
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(users_data, f, ensure_ascii=False, indent=4)

users_data = load_data()
user_steps = {}

# ---------------------- –ö–õ–ê–í–ò–ê–¢–£–†–´ ----------------------
yes_no_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
    resize_keyboard=True
)

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="‚ùå –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë")]
    ],
    resize_keyboard=True
)

# ---------------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ----------------------
async def get_random_cat():
    url = "https://api.thecatapi.com/v1/images/search"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                data = await response.json()
                return data[0]["url"] if data else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞: {e}")
        return None

def get_user(user_id):
    user_id = str(user_id)
    if user_id not in users_data:
        users_data[user_id] = {
            "goals": [],
            "reminder_hour": 21
        }
        save_data()
    return users_data[user_id]

# ---------------------- –ö–û–ú–ê–ù–î–´ ----------------------
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = str(message.from_user.id)
    users_data[user_id] = {"goals": [], "reminder_hour": 21}
    save_data()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ—é –ø–µ—Ä–≤—É—é —Ü–µ–ª—å. –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É.", reply_markup=types.ReplyKeyboardRemove())
    user_steps[user_id] = {"step": "habit", "goal": {}}

@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "/start - –Ω–∞—á–∞—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥\n"
        "/settings - –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        "/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
        "/reset_all - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ü–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã–µ\n"
        "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å."
    )

@dp.message(Command("reset_all"))
async def reset_all_command(message: types.Message):
    user_id = str(message.from_user.id)
    users_data[user_id] = {"goals": [], "reminder_hour": 21}
    save_data()
    await message.answer("–í—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start.")

@dp.message(Command("settings"))
async def settings_command(message: types.Message):
    await message.answer("‚öôÔ∏è –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=main_keyboard)

# ---------------------- –û–ë–†–ê–ë–û–¢–ö–ê –û–ù–ë–û–†–î–ò–ù–ì–ê ----------------------
@dp.message(F.text)
async def onboarding_handler(message: types.Message):
    if message.text.startswith('/'):
        return
    user_id = str(message.from_user.id)
    if user_id in user_steps:
        step_data = user_steps[user_id]
        step = step_data["step"]

        if step == "habit":
            step_data["goal"]["habit"] = message.text
            step_data["step"] = "amount"
            await message.answer("–°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π —Ç—ã –≥–æ—Ç–æ–≤ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å?")
        elif step == "amount":
            try:
                amount = int(message.text)
                step_data["goal"]["amount"] = amount
                step_data["step"] = "goal_name"
                await message.answer(f"–¢—ã –≥–æ—Ç–æ–≤ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å {amount}‚ÇΩ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ü–µ–ª—å.")
            except ValueError:
                await message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")
        elif step == "goal_name":
            step_data["goal"]["name"] = message.text
            step_data["step"] = "days"
            await message.answer("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è?")
        elif step == "days":
            try:
                days = int(message.text)
                step_data["goal"]["days"] = days
                step_data["step"] = "future_message"
                await message.answer("–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ –¥–ª—è –±—É–¥—É—â–µ–≥–æ.")
            except ValueError:
                await message.answer("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–∏—Å–ª–æ–º.")
        elif step == "future_message":
            step_data["goal"]["future_message"] = message.text
            user = get_user(user_id)
            if len(user["goals"]) >= 3:
                await message.answer("–£ —Ç–µ–±—è —É–∂–µ 3 —Ü–µ–ª–∏. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –≤ /settings.")
                user_steps.pop(user_id)
                return
            user["goals"].append({
                **step_data["goal"],
                "progress": 0,
                "saved": 0
            })
            save_data()
            await message.answer(
                f"–°—É–ø–µ—Ä! –¢–≤–æ—è —Ü–µ–ª—å: {step_data['goal']['name']}\n"
                f"–ü—Ä–∏–≤—ã—á–∫–∞: {step_data['goal']['habit']}\n"
                f"–°—É–º–º–∞: {step_data['goal']['amount']}‚ÇΩ\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {step_data['goal']['days']} –¥–Ω–µ–π\n"
                f"–£–∂–µ –∑–∞–≤—Ç—Ä–∞ –º—ã –Ω–∞—á–Ω–µ–º!"
            )
            user_steps.pop(user_id)

# ---------------------- –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ----------------------
async def send_reminders():
    now_hour = datetime.now().hour
    for user_id, user_data in users_data.items():
        try:
            if user_data.get("reminder_hour", 21) == now_hour:
                await bot.send_message(user_id, "–¢—ã —Å–µ–≥–æ–¥–Ω—è –ø–æ–±–µ–¥–∏–ª —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É?", reply_markup=yes_no_keyboard)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")

# ---------------------- –î–ï–ô–°–¢–í–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ----------------------
@dp.message(F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def daily_check(message: types.Message):
    user_id = str(message.from_user.id)
    user = get_user(user_id)
    if not user["goals"]:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π. –ù–∞—á–Ω–∏ —Å /start.")
        return

    current_goal = user["goals"][0]

    if message.text == "–î–∞":
        current_goal["progress"] += 1
        current_goal["saved"] += current_goal["amount"]
        save_data()

        await message.answer(
            f"–¢—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫! –ü—Ä–æ–≥—Ä–µ—Å—Å: {current_goal['progress']}/{current_goal['days']} –¥–Ω–µ–π, –Ω–∞–∫–æ–ø–ª–µ–Ω–æ {current_goal['saved']}‚ÇΩ."
        )

        cat_url = await get_random_cat()
        if cat_url:
            await message.answer_photo(cat_url, caption="–¢–≤–æ–π –º–µ–º —Å –∫–æ—Ç–∏–∫–æ–º! üê±")

        if current_goal["progress"] >= current_goal["days"]:
            await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏: {current_goal['name']}!\n{current_goal['future_message']}")
    else:
        support_phrases = [
            "–ù–µ –±–µ–¥–∞, –∑–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å!",
            "–¢—ã —Å–º–æ–∂–µ—à—å! –û—Ç–¥—ã—Ö–∞–π –∏ –Ω–∞–±–∏—Ä–∞–π—Å—è —Å–∏–ª.",
            "–í—Å–µ –æ–∫, –∫–æ—Ç–∏–∫ –∂–¥—ë—Ç —Ç–≤–æ–µ–π –ø–æ–±–µ–¥—ã –∑–∞–≤—Ç—Ä–∞!"
        ]
        await message.answer(random.choice(support_phrases))

# ---------------------- MAIN ----------------------
async def main():
    scheduler.add_job(send_reminders, "cron", hour=21, minute=0)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
