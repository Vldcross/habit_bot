import json
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio

API_TOKEN = "8015596815:AAEiisUZoMvVLoQ9r6ciC3KSwWwgrbv1EJE"
DATA_FILE = "data.json"
DAILY_HOUR = 21  # 21:00 –ø–æ –ú–°–ö

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

data = load_data()
yes_no_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
yes_no_keyboard.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))

@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in data:
        data[user_id] = {
            "habit": None,
            "daily_amount": 0,
            "goal": None,
            "goal_days": 0,
            "current_day": 0,
            "saved_amount": 0
        }
        save_data(data)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç –∫–∞–∫–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ —Ö–æ—á–µ—à—å –∏–∑–±–∞–≤–∏—Ç—å—Å—è?")
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞! –Ø —É–∂–µ –≤—Å—ë –ø–æ–º–Ω—é üòâ")

@dp.message(F.text, lambda m: str(m.from_user.id) in data and data[str(m.from_user.id)]["habit"] is None)
async def set_habit(message: types.Message):
    user_id = str(message.from_user.id)
    data[user_id]["habit"] = message.text
    save_data(data)
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π —Ç—ã –≥–æ—Ç–æ–≤ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –µ—Å–ª–∏ –ø–æ–±–µ–¥–∏—à—å –ø—Ä–∏–≤—ã—á–∫—É '{message.text}'?")

@dp.message(F.text, lambda m: str(m.from_user.id) in data and data[str(m.from_user.id)]["daily_amount"] == 0 and data[str(m.from_user.id)]["habit"] is not None)
async def set_amount(message: types.Message):
    user_id = str(message.from_user.id)
    try:
        amount = int(message.text)
        data[user_id]["daily_amount"] = amount
        save_data(data)
        await message.answer("–°—É–ø–µ—Ä! –ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, PlayStation 5).")
    except:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

@dp.message(F.text, lambda m: str(m.from_user.id) in data and data[str(m.from_user.id)]["goal"] is None and data[str(m.from_user.id)]["daily_amount"] > 0)
async def set_goal(message: types.Message):
    user_id = str(message.from_user.id)
    data[user_id]["goal"] = message.text
    save_data(data)
    await message.answer("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —ç—Ç–æ–π —Ü–µ–ª—å—é?")

@dp.message(F.text, lambda m: str(m.from_user.id) in data and data[str(m.from_user.id)]["goal_days"] == 0 and data[str(m.from_user.id)]["goal"] is not None)
async def set_goal_days(message: types.Message):
    user_id = str(message.from_user.id)
    try:
        days = int(message.text)
        data[user_id]["goal_days"] = days
        save_data(data)
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 21:00 —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –ø–æ–±–µ–¥–∏–ª –ª–∏ —Ç—ã –ø—Ä–∏–≤—ã—á–∫—É '{data[user_id]['habit']}'. –ì–æ—Ç–æ–≤?", reply_markup=yes_no_keyboard)
    except:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

@dp.message(F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def daily_check(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in data or data[user_id]["habit"] is None:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ /start")
        return

    if message.text == "–î–∞":
        data[user_id]["current_day"] += 1
        data[user_id]["saved_amount"] += data[user_id]["daily_amount"]
        save_data(data)
        await message.answer(f"–¢—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫! üí™ –¢—ã —É–∂–µ –±–ª–∏–∂–µ –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏: {data[user_id]['goal']}, "
                             f"—Ç—ã –ø—Ä–æ–¥–µ—Ä–∂–∞–ª—Å—è {data[user_id]['current_day']}/{data[user_id]['goal_days']} –¥–Ω–µ–π, "
                             f"–∏ –Ω–∞–∫–æ–ø–∏–ª –∞–∂ —Ü–µ–ª—ã—Ö {data[user_id]['saved_amount']}‚ÇΩ.")
    else:
        await message.answer(f"–û—á–µ–Ω—å –∂–∞–ª—å, –∫–æ—Ç–∏—á–∫–∞. üòø –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –Ω–æ–≤—ã–π —à–∞–Ω—Å! "
                             f"–°–µ–π—á–∞—Å {data[user_id]['current_day']}/{data[user_id]['goal_days']} –¥–Ω–µ–π, "
                             f"–≤ –∫–æ–ø–∏–ª–∫–µ {data[user_id]['saved_amount']}‚ÇΩ.")

async def send_daily_reminder():
    for user_id in data.keys():
        try:
            await bot.send_message(user_id, f"–¢—ã —Å–µ–≥–æ–¥–Ω—è –ø–æ–±–µ–¥–∏–ª —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É ‚Äî {data[user_id]['habit']}?", reply_markup=yes_no_keyboard)
        except Exception as e:
            logging.warning(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def main():
    scheduler.add_job(send_daily_reminder, "cron", hour=DAILY_HOUR, minute=0)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
