import json
import logging
import os
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler

API_TOKEN = "8015596815:AAEiisUZoMvVLoQ9r6ciC3KSwWwgrbv1EJE"
DATA_FILE = "data.json"
DAILY_HOUR = 21  # 21:00 –ø–æ –ú–°–ö

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

data = load_data()

yes_no_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
    resize_keyboard=True
)

settings_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å"), KeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É")],
        [KeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è"), KeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–Ω–∏")],
        [KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="‚öôÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ü–µ–ª—å")],
        [KeyboardButton(text="‚Ü©Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å")]
    ],
    resize_keyboard=True
)

awaiting_action = {}
pending_changes = {}

@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in data:
        data[user_id] = {
            "habit": None,
            "daily_amount": 0,
            "goal": None,
            "goal_days": 0,
            "current_day": 0,
            "saved_amount": 0,
            "reminder_hour": DAILY_HOUR
        }
        save_data(data)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç –∫–∞–∫–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ —Ö–æ—á–µ—à—å –∏–∑–±–∞–≤–∏—Ç—å—Å—è?")
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞! –ò—Å–ø–æ–ª—å–∑—É–π /settings, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")

@dp.message(Command("settings"))
async def show_settings(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=settings_keyboard)

@dp.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in data or data[user_id]["goal"] is None:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return
    habit = data[user_id].get("habit", "‚Äî")
    goal = data[user_id].get("goal", "‚Äî")
    days = data[user_id].get("goal_days", 0)
    current = data[user_id].get("current_day", 0)
    amount = data[user_id].get("saved_amount", 0)
    await message.answer(
        f"üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        f"–ü—Ä–∏–≤—ã—á–∫–∞: {habit}\n"
        f"–¶–µ–ª—å: {goal}\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {current}/{days} –¥–Ω–µ–π\n"
        f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ: {amount}‚ÇΩ",
        parse_mode="Markdown"
    )

@dp.message(F.text == "üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å")
async def change_goal(message: types.Message):
    awaiting_action[message.from_user.id] = "goal"
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Ü–µ–ª—å:")

@dp.message(F.text == "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É")
async def change_amount(message: types.Message):
    awaiting_action[message.from_user.id] = "amount"
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—É–º–º—É (—Ä—É–±/–¥–µ–Ω—å):")

@dp.message(F.text == "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è")
async def change_time(message: types.Message):
    awaiting_action[message.from_user.id] = "time"
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —á–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (0-23):")

@dp.message(F.text == "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–Ω–∏")
async def change_days(message: types.Message):
    awaiting_action[message.from_user.id] = "days"
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:")

@dp.message(F.text == "‚öôÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ü–µ–ª—å")
async def reset_goal(message: types.Message):
    user_id = str(message.from_user.id)
    data[user_id] = {
        "habit": None,
        "daily_amount": 0,
        "goal": None,
        "goal_days": 0,
        "current_day": 0,
        "saved_amount": 0,
        "reminder_hour": DAILY_HOUR
    }
    save_data(data)
    await message.answer("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –•–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É? –ù–∞–ø–∏—à–∏ /start.", reply_markup=settings_keyboard)

@dp.message(F.text == "‚Ü©Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å")
async def cancel_edit(message: types.Message):
    user_id = message.from_user.id
    awaiting_action.pop(user_id, None)
    pending_changes.pop(user_id, None)
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=settings_keyboard)

@dp.message(F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def handle_yes_no(message: types.Message):
    user_id = message.from_user.id
    if user_id in pending_changes:
        if message.text == "–î–∞":
            field, value = pending_changes.pop(user_id)
            data[str(user_id)][field] = value
            save_data(data)
            awaiting_action.pop(user_id, None)
            await message.answer("–°—É–ø–µ—Ä! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã.", reply_markup=settings_keyboard)
        else:
            pending_changes.pop(user_id)
            awaiting_action.pop(user_id, None)
            await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.", reply_markup=settings_keyboard)
    else:
        if user_id not in data or data[str(user_id)]["habit"] is None:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ /start")
            return
        if message.text == "–î–∞":
            data[str(user_id)]["current_day"] += 1
            data[str(user_id)]["saved_amount"] += data[str(user_id)]["daily_amount"]
            save_data(data)
            await message.answer(f"–¢—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫! üí™ –¢—ã –±–ª–∏–∂–µ –∫ —Ü–µ–ª–∏: {data[str(user_id)]['goal']}, "
                                 f"{data[str(user_id)]['current_day']}/{data[str(user_id)]['goal_days']} –¥–Ω–µ–π, "
                                 f"–Ω–∞–∫–æ–ø–∏–ª {data[str(user_id)]['saved_amount']}‚ÇΩ.")
        else:
            await message.answer(f"–û—á–µ–Ω—å –∂–∞–ª—å üòø –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π —à–∞–Ω—Å! "
                                 f"{data[str(user_id)]['current_day']}/{data[str(user_id)]['goal_days']} –¥–Ω–µ–π, "
                                 f"–≤ –∫–æ–ø–∏–ª–∫–µ {data[str(user_id)]['saved_amount']}‚ÇΩ.")

@dp.message(F.text)
async def process_input(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ /start")
        return

    action = awaiting_action.get(message.from_user.id)
    if action:
        try:
            if action == "goal":
                pending_changes[message.from_user.id] = ("goal", message.text)
                await message.answer(f"–¢—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–ª–∏ –Ω–∞: {message.text}?", reply_markup=yes_no_keyboard)
            elif action == "amount":
                amount = int(message.text)
                pending_changes[message.from_user.id] = ("daily_amount", amount)
                await message.answer(f"–¢—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã –Ω–∞: {amount}‚ÇΩ?", reply_markup=yes_no_keyboard)
            elif action == "time":
                new_hour = int(message.text)
                if 0 <= new_hour <= 23:
                    pending_changes[message.from_user.id] = ("reminder_hour", new_hour)
                    await message.answer(f"–¢—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞: {new_hour}:00?", reply_markup=yes_no_keyboard)
                else:
                    await message.answer("–ß–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 23.")
            elif action == "days":
                days = int(message.text)
                pending_changes[message.from_user.id] = ("goal_days", days)
                await message.answer(f"–¢—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–Ω–µ–π –Ω–∞: {days}?", reply_markup=yes_no_keyboard)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

async def send_daily_reminder():
    for user_id in data.keys():
        try:
            hour = data[user_id].get("reminder_hour", DAILY_HOUR)
            if datetime.now().hour == hour:
                await bot.send_message(user_id, f"–¢—ã —Å–µ–≥–æ–¥–Ω—è –ø–æ–±–µ–¥–∏–ª –ø—Ä–∏–≤—ã—á–∫—É ‚Äî {data[user_id]['habit']}?", reply_markup=yes_no_keyboard)
        except Exception as e:
            logging.warning(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def main():
    scheduler.add_job(send_daily_reminder, "cron", minute=0)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
