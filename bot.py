import json
import logging
import os
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler

API_TOKEN = "8015596815:AAEiisUZoMvVLoQ9r6ciC3KSwWwgrbv1EJE"
DATA_FILE = "data.json"
DAILY_HOUR = 21  # 21:00 –ø–æ –ú–°–ö

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

data = load_data()

yes_no_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
    resize_keyboard=True
)

settings_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å"), KeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É")],
        [KeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è"), KeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–Ω–∏")],
        [KeyboardButton(text="‚öôÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ü–µ–ª—å")]
    ],
    resize_keyboard=True
)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
awaiting_action = {}

@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in data:
        data[user_id] = {
            "habit": None,
            "daily_amount": 0,
            "goal": None,
            "goal_days": 0,
            "current_day": 0,
            "saved_amount": 0,
            "reminder_hour": DAILY_HOUR
        }
        save_data(data)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç –∫–∞–∫–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ —Ö–æ—á–µ—à—å –∏–∑–±–∞–≤–∏—Ç—å—Å—è?")
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞! –ò—Å–ø–æ–ª—å–∑—É–π /settings, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")

@dp.message(Command("settings"))
async def show_settings(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=settings_keyboard)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
@dp.message(F.text == "üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å")
async def change_goal(message: types.Message):
    awaiting_action[message.from_user.id] = "goal"
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Ü–µ–ª—å:")

@dp.message(F.text == "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É")
async def change_amount(message: types.Message):
    awaiting_action[message.from_user.id] = "amount"
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—É–º–º—É (—Ä—É–±/–¥–µ–Ω—å):")

@dp.message(F.text == "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è")
async def change_time(message: types.Message):
    awaiting_action[message.from_user.id] = "time"
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —á–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (0-23):")

@dp.message(F.text == "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–Ω–∏")
async def change_days(message: types.Message):
    awaiting_action[message.from_user.id] = "days"
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:")

@dp.message(F.text == "‚öôÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ü–µ–ª—å")
async def reset_goal(message: types.Message):
    user_id = str(message.from_user.id)
    data[user_id] = {
        "habit": None,
        "daily_amount": 0,
        "goal": None,
        "goal_days": 0,
        "current_day": 0,
        "saved_amount": 0,
        "reminder_hour": DAILY_HOUR
    }
    save_data(data)
    await message.answer("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É.", reply_markup=types.ReplyKeyboardRemove())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
@dp.message(F.text)
async def process_input(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ /start")
        return

    action = awaiting_action.get(message.from_user.id)
    if action == "goal":
        data[user_id]["goal"] = message.text
        save_data(data)
        awaiting_action.pop(message.from_user.id)
        await message.answer(f"–ù–æ–≤–∞—è —Ü–µ–ª—å: {message.text}", reply_markup=settings_keyboard)
    elif action == "amount":
        try:
            data[user_id]["daily_amount"] = int(message.text)
            save_data(data)
            awaiting_action.pop(message.from_user.id)
            await message.answer(f"–ù–æ–≤–∞—è —Å—É–º–º–∞: {message.text}‚ÇΩ", reply_markup=settings_keyboard)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    elif action == "time":
        try:
            new_hour = int(message.text)
            if 0 <= new_hour <= 23:
                data[user_id]["reminder_hour"] = new_hour
                save_data(data)
                awaiting_action.pop(message.from_user.id)
                await message.answer(f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {new_hour}:00", reply_markup=settings_keyboard)
            else:
                await message.answer("–ß–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 23.")
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    elif action == "days":
        try:
            data[user_id]["goal_days"] = int(message.text)
            save_data(data)
            awaiting_action.pop(message.from_user.id)
            await message.answer(f"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {message.text}", reply_markup=settings_keyboard)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# --- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ---
@dp.message(F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def daily_check(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in data or data[user_id]["habit"] is None:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ /start")
        return

    if message.text == "–î–∞":
        data[user_id]["current_day"] += 1
        data[user_id]["saved_amount"] += data[user_id]["daily_amount"]
        save_data(data)
        await message.answer(f"–¢—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫! üí™ –¢—ã –±–ª–∏–∂–µ –∫ —Ü–µ–ª–∏: {data[user_id]['goal']}, "
                             f"{data[user_id]['current_day']}/{data[user_id]['goal_days']} –¥–Ω–µ–π, "
                             f"–Ω–∞–∫–æ–ø–∏–ª {data[user_id]['saved_amount']}‚ÇΩ.")
    else:
        await message.answer(f"–û—á–µ–Ω—å –∂–∞–ª—å üòø –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π —à–∞–Ω—Å! "
                             f"{data[user_id]['current_day']}/{data[user_id]['goal_days']} –¥–Ω–µ–π, "
                             f"–≤ –∫–æ–ø–∏–ª–∫–µ {data[user_id]['saved_amount']}‚ÇΩ.")

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ---
async def send_daily_reminder():
    for user_id in data.keys():
        try:
            hour = data[user_id].get("reminder_hour", DAILY_HOUR)
            if datetime.now().hour == hour:
                await bot.send_message(user_id, f"–¢—ã —Å–µ–≥–æ–¥–Ω—è –ø–æ–±–µ–¥–∏–ª –ø—Ä–∏–≤—ã—á–∫—É ‚Äî {data[user_id]['habit']}?", reply_markup=yes_no_keyboard)
        except Exception as e:
            logging.warning(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def main():
    scheduler.add_job(send_daily_reminder, "cron", minute=0)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
